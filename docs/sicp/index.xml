<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Sicp on hugonotes</title>
    <link>https://youngerfill.github.io/hugonotes/sicp/</link>
    <description>Recent content in Sicp on hugonotes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 01 Oct 2021 15:49:32 +0200</lastBuildDate><atom:link href="https://youngerfill.github.io/hugonotes/sicp/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Exercise 1.07</title>
      <link>https://youngerfill.github.io/hugonotes/sicp/chapter01/exercise-1.07/</link>
      <pubDate>Fri, 01 Oct 2021 15:49:32 +0200</pubDate>
      
      <guid>https://youngerfill.github.io/hugonotes/sicp/chapter01/exercise-1.07/</guid>
      <description>Background: Section 1.1.7, Square Roots by Newton’s Method (define (square x) (* x x)) (define (average x y) (/ (+ x y) 2)) (define (improve guess x) (average guess (/ x guess))) (define (good-enough? guess x) (&amp;lt; (abs (- (square guess) x)) 0.001)) (define (sqrt-iter guess x) (if (good-enough? guess x) guess (sqrt-iter (improve guess x) x))) (define (sqrt x) (sqrt-iter 1.0 x))     Question: The good-enough? test used in computing square roots will not be very effective for finding the square roots of very small numbers.</description>
    </item>
    
    <item>
      <title>Exercise 1.06</title>
      <link>https://youngerfill.github.io/hugonotes/sicp/chapter01/exercise-1.06/</link>
      <pubDate>Fri, 01 Oct 2021 15:48:01 +0200</pubDate>
      
      <guid>https://youngerfill.github.io/hugonotes/sicp/chapter01/exercise-1.06/</guid>
      <description>Background: Section 1.1.7, Square Roots by Newton’s Method (define (square x) (* x x)) (define (average x y) (/ (+ x y) 2)) (define (improve guess x) (average guess (/ x guess))) (define (good-enough? guess x) (&amp;lt; (abs (- (square guess) x)) 0.001)) (define (sqrt-iter guess x) (if (good-enough? guess x) guess (sqrt-iter (improve guess x) x))) (define (sqrt x) (sqrt-iter 1.0 x))     Question: Alyssa P. Hacker doesn’t see why if needs to be provided as a special form.</description>
    </item>
    
    <item>
      <title>Exercise 1.05</title>
      <link>https://youngerfill.github.io/hugonotes/sicp/chapter01/exercise-1.05/</link>
      <pubDate>Fri, 01 Oct 2021 15:46:39 +0200</pubDate>
      
      <guid>https://youngerfill.github.io/hugonotes/sicp/chapter01/exercise-1.05/</guid>
      <description>Question: Ben Bitdiddle has invented a test to determine whether the interpreter he is faced with is using applicative-order evaluation or normal-order evaluation. He defines the following two procedures:
 (define (p) (p)) (define (test x y) (if (= x 0) 0 y))   Then he evaluates the expression
 (test 0 (p))   What behavior will Ben observe with an interpreter that uses applicative-order evaluation? What behavior will he observe with an interpreter that uses normal-order evaluation?</description>
    </item>
    
    <item>
      <title>Exercise 1.04</title>
      <link>https://youngerfill.github.io/hugonotes/sicp/chapter01/exercise-1.04/</link>
      <pubDate>Fri, 01 Oct 2021 15:43:40 +0200</pubDate>
      
      <guid>https://youngerfill.github.io/hugonotes/sicp/chapter01/exercise-1.04/</guid>
      <description>Question: Observe that our model of evaluation allows for combinations whose operators are compound expressions. Use this observation to describe the behavior of the following procedure:
 (define (a-plus-abs-b a b) ((if (&amp;gt; b 0) + -) a b))     Answer: In the body of a-plus-abs-b a b, the expression (if (&amp;gt; b 0) + -) evaluates to an arithmetic operation (either + or -, depending on the sign of b’s actual argument).</description>
    </item>
    
    <item>
      <title>Exercise 1.03</title>
      <link>https://youngerfill.github.io/hugonotes/sicp/chapter01/exercise-1.03/</link>
      <pubDate>Fri, 01 Oct 2021 15:42:25 +0200</pubDate>
      
      <guid>https://youngerfill.github.io/hugonotes/sicp/chapter01/exercise-1.03/</guid>
      <description>Question: Define a procedure that takes three numbers as arguments and returns the sum of the squares of the two larger numbers.
   Answer: (define (square x) (* x x)) (define (sum-of-squares x y) (+ (square x) (square y))) (define (sum-squares-larger a b c) (cond ((and (&amp;lt;= a b) (&amp;lt;= a c)) (sum-of-squares b c)) ((and (&amp;lt;= b a) (&amp;lt;= b c)) (sum-of-squares a c)) (else (sum-of-squares a b))))     </description>
    </item>
    
    <item>
      <title>Exercise 1.02</title>
      <link>https://youngerfill.github.io/hugonotes/sicp/chapter01/exercise-1.02/</link>
      <pubDate>Fri, 01 Oct 2021 15:38:53 +0200</pubDate>
      
      <guid>https://youngerfill.github.io/hugonotes/sicp/chapter01/exercise-1.02/</guid>
      <description>Question: todo
 (+ 1 2)     Answer: todo
   </description>
    </item>
    
    <item>
      <title>Exercise 1.01</title>
      <link>https://youngerfill.github.io/hugonotes/sicp/chapter01/exercise-1.01/</link>
      <pubDate>Fri, 01 Oct 2021 15:34:34 +0200</pubDate>
      
      <guid>https://youngerfill.github.io/hugonotes/sicp/chapter01/exercise-1.01/</guid>
      <description>Question: Below is a sequence of expressions. What is the result printed by the interpreter in response to each expression? Assume that the sequence is to be evaluated in the order in which it is presented.
 10 (+ 5 3 4) (- 9 1) (/ 6 2) (+ (* 2 4) (- 4 6)) (define a 3) (define b (+ a 1)) (+ a b (* a b)) (= a b) (if (and (&amp;gt; b a) (&amp;lt; b (* a b))) b a) (cond ((= a 4) 6) ((= b 4) (+ 6 7 a)) (else 25)) (+ 2 (if (&amp;gt; b a) b a)) (* (cond ((&amp;gt; a b) a) ((&amp;lt; a b) b) (else -1)) (+ a 1))     Answer: &amp;gt; 10 10 &amp;gt; (+ 5 3 4) 12 &amp;gt; (- 9 1) 8 &amp;gt; (/ 6 2) 3 &amp;gt; (+ (* 2 4) (- 4 6)) 6 &amp;gt; (define a 3) &amp;gt; (define b (+ a 1)) &amp;gt; (+ a b (* a b)) 19 &amp;gt; (= a b) #f &amp;gt; (if (and (&amp;gt; b a) (&amp;lt; b (* a b))) b a) 4 &amp;gt; (cond ((= a 4) 6) ((= b 4) (+ 6 7 a)) (else 25)) 16 &amp;gt; (+ 2 (if (&amp;gt; b a) b a)) 6 &amp;gt; (* (cond ((&amp;gt; a b) a) ((&amp;lt; a b) b) (else -1)) (+ a 1)) 16     </description>
    </item>
    
  </channel>
</rss>
