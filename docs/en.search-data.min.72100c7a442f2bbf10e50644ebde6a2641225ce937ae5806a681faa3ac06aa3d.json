[{"id":0,"href":"/notes/links.html","title":"Links","section":"Notes","content":"== Technical\n\n=== Mobile\n\nThe Search for a FLOSS Mobile OS (Aug 2021)\nhttps://blog.emacsen.net/blog/2021/08/23/floss-mobile-os-aug-2021/\nhttps://news.ycombinator.com/item?id=28296738\n\n=== Programming\n\nData Structures and Algorithms in JavaScript\nhttps://news.ycombinator.com/item?id=20634409\nhttps://amejiarosario.gumroad.com/l/dsajs\n\n\nJohn Carmack on Functional Programming (2013\nhttps://news.ycombinator.com/item?id=15036591\n\n\nA Thought Experiment: Using the ECS Pattern Outside of Game Engines\nhttps://news.ycombinator.com/item?id=21892126\nhttps://adventures.michaelfbryan.com/posts/ecs-outside-of-games/\nhttps://en.m.wikipedia.org/wiki/Entity_component_system#Characteristics\n\n\n=== Web\n\n==== HTML, CSS\n\nScrollspy with ‘just JavaScript’\nhttps://medium.com/p1xts-blog/scrollspy-with-just-javascript-3131c114abdc\n\nTypeSafe CSS\nhttps://uglyduck.ca/typesafe-sans-css/\n\n\nTen modern layouts in one line of CSS\nhttps://web.dev/one-line-layouts/\nhttps://news.ycombinator.com/item?id=24003385\n\n\nMy current HTML boilerplate\nhttps://www.matuzo.at/blog/html-boilerplate/\nhttps://news.ycombinator.com/item?id=26952557\n\n\nHTML5 Boilerplate\nhttps://html5boilerplate.com/\n\n\nA simple guide to HTML  elements\nhttps://github.com/joshbuchea/HEAD\n\n\nHTML Tips (2020)\nhttps://markodenic.com/html-tips/\nhttps://news.ycombinator.com/item?id=27054348\n\nDrop-in CSS Frameworks\nhttps://github.com/sw-yx/spark-joy#cssui-templates\n\nList of awesome CSS frameworks\nhttps://github.com/troxler/awesome-css-frameworks\n\nSimple.css\nhttps://simplecss.org/\n\nWater.css\nhttps://watercss.netlify.app/\n\n==== JS\n\nSolidJS\nhttps://www.solidjs.com/docs/1.0.0\n\n\nlit-html\nhttps://lit-html.polymer-project.org/guide\n\n=== C/C++\n\nShow HN: Angeldust – a fast and efficient video game\nhttps://news.ycombinator.com/item?id=21858226\n\nC++ Core Guidelines (2021)\nhttps://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md\n\n\nTracy Profiler\nhttps://github.com/wolfpld/tracy\n\n==== Networking\n\nNNG\n\n\nhttps://nng.nanomsg.org/man/tip/index.html\nhttps://github.com/nanomsg/nng\n\n\nUDP Server-Client implementation in C\nhttps://www.geeksforgeeks.org/udp-server-client-implementation-c/\n\nSocket Programming in C/C++\nhttps://www.geeksforgeeks.org/socket-programming-cc/\n\n\n=== Linux\n\nHow NAT traversal works\nhttps://tailscale.com/blog/how-nat-traversal-works/\n\nVentoy\nhttps://github.com/ventoy/Ventoy\n\nMinIO Quickstart Guide\nhttps://github.com/minio/minio/blob/master/README.md\n\nPostgREST: REST API for any Postgres database \nhttps://news.ycombinator.com/item?id=25159097\n\n==== bash\n\nSome Relatively Obscure Bash Tips\nhttps://zwischenzugs.com/2020/05/09/some-relatively-obscure-bash-tips/\n\nEscaping strings in Bash using !:q\nhttps://til.simonwillison.net/bash/escaping-a-string\n\nAn Opinionated Guide to xargs\nhttps://www.oilshell.org/blog/2021/08/xargs.html\n\nxargs(1) — Linux manual page\nhttps://www.man7.org/linux/man-pages/man1/xargs.1.html\n\nHtmlq: like jq, but for html\nhttps://github.com/mgdm/htmlq\nhttps://news.ycombinator.com/item?id=28441880\n\nrlwrap(1) - Linux man page\nhttps://linux.die.net/man/1/rlwrap\n\nLinux Productivity Tools (2019)\nhttps://news.ycombinator.com/item?id=23229241\n\n\n"},{"id":1,"href":"/arch/vps.html","title":"Installing Arch Linux on a VPS","section":"Arch","content":"== 1. Base system\n\nCreate VPS, pick Debian 9.3 as OS.::\n  --\u0026gt; didn\u0026#39;t work 2nd time, stuck in 1st reboot;;\n    picked centos and worked\n\nCopy bootstrap files from `M:\\vm\\isovps2arch` to `M:\\mshare\\vps2arch` and `cd`\ninto the latter folder.\n\nUpload bootstrap files to the newly created VPS:\n\n[source,shell]\n----\nscp * root@IP_ADDRESS:\n----\n\nLog into the VPS\n\n[source,shell]\n----\nchmod +x vps2arch\nmv * / \u0026amp;\u0026amp; cd /\n./vps2arch\necho HOSTNAME \u0026gt; /etc/hostname\nsync; reboot -f\n----\n\n== 2. Create user\n\n[source,shell]\n----\nuseradd -m bert\ngroupadd sudoers\nusermod -aG sudoers bert\npasswd bert\n\npacman -Syu sudo vim ufw knockd lighttpd git\n----\n\nallow group \u0026#39;sudoers\u0026#39; to use sudo (in conf file):\n\n[source,shell]\n----\necho \u0026#39;%sudoers ALL=(ALL) ALL\u0026#39; \u0026gt; /etc/sudoers\n----\n\nInstall some packages:\n\n[source,shell]\n----\npacman -Syu sudo vim ufw knockd lighttpd git\n----\n\nuse \u0026#39;vim\u0026#39; as \u0026#39;vi\u0026#39;:\n\n[source,shell]\n----\nmv /usr/bin/vi /usr/bin/vi_BAK \u0026amp;\u0026amp; ln -s /usr/bin/vim /usr/bin/vi\n----\n\n== 3. sshd config\n\nOn the client:\n\n[source,shell]\n----\nssh-copy-id bert@IP_ADDRESS\n----\n\nOn the server:\n\n[source,shell]\n----\nvi /etc/ssh/sshd_config\n----\n\n----\nLogLevel VERBOSE\nPermitRootLogin no\nPubkeyAuthentication yes\nPasswordAuthentication no\nAuthorizedKeysFile .ssh/authorized_keys\nChallengeResponseAuthentication no\nUsePAM yes\nAllowUsers bert\n----\n\nAdd 5s delay to failed login attempts:\n\n[source,shell]\n----\nbash -c \u0026#34;echo auth optional pam_faildelay.so delay=5000000 \u0026gt;\u0026gt; /etc/pam.d/system-login\u0026#34;\n----\n\nreboot needed for future ufw config:\n\n----\nreboot now\n----\n\n== 4. ufw, knockd\n\nssh bert@IP_ADDRESS\n\n[source,shell]\n----\nsudo -i\n----\n\n[source,shell]\n----\nufw default deny ufw allow 22 ufw allow 80,443/tcp ufw enable\n----\n\n[source,shell]\n----\nvi /etc/knockd.conf\n----\n\n[source,shell]\n----\n[options]\n    logfile = /var/log/knockd.log\n\n[SSH]\n    sequence    = PORT1,...,PORTN\n    seq_timeout = 5\n    start_command = ufw allow from %IP% to any port 22\n    tcpflags    = syn\n    cmd_timeout   = 10\n    stop_command  = ufw delete allow from %IP% to any port 22\n----\n\n[source,shell]\n----\nsystemctl enable ufw.service\nsystemctl start ufw.service\nsystemctl enable knockd.service\nsystemctl start knockd.service\nufw delete allow 22\n----\n\n== 5. Customization\n\nCreate dotfiles \u0026amp; tools:\n\n[source,shell]\n----\nmkdir ~/tools \u0026amp;\u0026amp; cd ~/tools\ngit clone https://github.com/bergoid/lswrappers.git\ngit clone https://github.com/bergoid/rabot.git\ngit clone https://github.com/bergoid/gt.git\ngit clone https://github.com/bergoid/preppy.git\ngit clone https://github.com/bergoid/dotfiles.git\ndotfiles/install_dotfiles\necho hostnameColour=27 \u0026gt; ~/.localConfig\n----\n\nCustomize root env:\n\n[source,shell]\n----\nsudo -i\nln -s /home/bert/.tmux.conf .tmux.conf\nln -s /home/bert/tools/dotfiles/.vim/ .vim\nln -s /home/bert/tools/ tools\nln -s /home/bert/.bash_profile .bash_profile\nln -s /home/bert/.bashrc .bashrc\n----\n\n== 6. spigot server\n\nEnable AUR\n[source,shell]\n----\nsudo pacman -Syu base base-devel mkcd ~/aur\n----\n\nInstall JRE\n[source,shell]\n----\ngit clone https://aur.archlinux.org/jre.git cd jre makepkg -si\n----\n\nInstall bukkit/spigot:\n\n[source,shell]\n----\nmkcd ~/mc\ncurl \u0026#34;https://hub.spigotmc.org/jenkins/job/BuildTools/lastSuccessfulBuild/artifact/target/BuildTools.jar\u0026#34; \n-o BuildTools.jar java -jar BuildTools.jar\n----\n\n[source,shell]\n----\nsudo pacman -Syu tmux dialog\n----\n\n[source,shell]\n----\nvi /etc/locale.gen\n----\n\nUncomment: \u0026#39;en_US.UTF-8 UTF-8\u0026#39;\n\n[source,shell]\n----\nlocale-gen\necho LANG=en_US.UTF-8 \u0026gt; /etc/locale.conf\nsudo ufw allow 24680\n----\n\nRemoved jre9:\n\n[source,shell]\n----\nsudo pacman -Rs jre\n----\n\nInstall jre8:::\n\n[source,shell]\n----\ncd ~/aur git clone https://aur.archlinux.org/jre8.git\ncd jre8\nmakepkg -si\n----\n\nCURRENT STATE\n\n"},{"id":2,"href":"/arch/virtualbox.html","title":"Installing Arch Linux in VirtualBox","section":"Arch","content":"=== 1. Arch Linux .iso file\n\narchlinux-2018.02.01-x86_64.iso::\n  from:\n  https://archlinux.cu.be/iso/2018.02.01/archlinux-2018.02.01-x86_64.iso\n  saved at: \u0026#34;M:vmisoarchlinux-2018.02.01-x86_64.iso\u0026#34;\n\n=== 2. VirtualBox:\n\n* {blank}\n+\nThis document applies to v5.2.6::\n  ** Help/About VirtualBox\n  ** File/Check for updates\n* {blank}\n+\nin File/Preferences:::\n  ** General: check vm default location: \u0026#34;M:vm\u0026#34;\n* {blank}\n+\nin File/Host Network Manager:::\n  ** {blank}\n  +\n  Create host-only network;;\n    *** Set the IP address, e.g. : 192.168.236.2\n    *** Network mask : 255.255.255.0\n* {blank}\n+\nnew vm::\n  ** {blank}\n  +\n  name: yeba;;\n    *** make sure \u0026#34;M:vmyeba\u0026#34; doesn\u0026#39;t exist before creation of VM\n  ** type/version: arch linux 64 bit\n  ** memory 4096 MB\n  ** create virtual HD\n  ** press \u0026#34;create\u0026#34;\n  ** File size 30 GB\n  ** VDI\n  ** dynamically allocated\n* \u0026#34;yeba\u0026#34; (powered off) appears in list of VMs\n* yeba Settings:\n+\n____\n** General/Advanced: shared clipboard: bidirectional\n** System/Motherboard:\n*** Boot order: Optical, Harddisk\n*** {blank}\n+\nExtended features:::\n  **** disable I/O APIC\n  **** disable EFI\n  **** enable HW clock in UTC time\n** {blank}\n+\nDisplay:::\n  *** {blank}\n  +\n  Video Memory: depends on the resolution;;\n    **** for 1080p (1920×1080): 8 MB\n    **** for 4k (3840×2160): 32 MB\n  *** Monitor count: 1\n  *** Graphics controller: VBoxSVGA\n  *** 3D acceleration: off\n\n- Storage:::\n  ** {blank}\n  +\n  IDE secondary master: \u0026#34;M:vmisoarchlinux-2018.02.01-x86_64.iso\u0026#34;;;\n    *** don\u0026#39;t enable LiveCD/DVD\n  ** {blank}\n  +\n  SATA: add hard disk;;\n    *** new hard disk\n    *** VDI, dynamically allocated, 100 GB\n    *** M:vmhddLargeData.vdi\n- Network:::\n  ** Adapter 1 : NAT\n  ** Adapter 2 : Host-only, name: the one just created in\n  File/Preferences\n- Shared Folders:::\n  ** \u0026#34;C:\\Bert\\vm\\pub\u0026#34;\n  ** \u0026#34;M:\\mshare\u0026#34;\n  ** auto-mount, full access\n____\n\n=== 3. From LiveCD to working root login:\n\nstart VM :\n\n....\nloadkeys be-latin1\n....\n\nNetwork should work: :\n\n....\ncurl www.google.com\n....\n\nSyncronize the system clock with NTP :\n\n....\ntimedatectl set-ntp true\n....\n\nCreate partition table :\n\n....\nfdisk -l /dev/sda\n\nfdisk /dev/sda\n    --\u0026gt; n : new partition\n    --\u0026gt; p : primary partition\n    --\u0026gt; enter : partition #1\n    --\u0026gt; enter : default first sector\n    --\u0026gt; enter : default last sector\n    --\u0026gt; w write partition table\n....\n\nFormat the partition :\n\n....\nmkfs.ext4 /dev/sda1\n....\n\nMount the partition :\n\n....\nmount /dev/sda1 /mnt\n....\n\nMake sure nearest mirror is first in the list :\n\n....\nvi /etc/pacman.d/mirrorlist\n....\n\nInstall the \u0026#39;base\u0026#39; package group :\n\n....\npacstrap /mnt base\n....\n\nCreate an fstab file :\n\n....\ngenfstab -U /mnt \u0026gt;\u0026gt; /mnt/etc/fstab\n....\n\n\u0026#39;chroot\u0026#39; into the newly created system :\n\n....\narch-chroot /mnt\n....\n\nSet the timezone :\n\n....\nln -s /usr/share/zoneinfo/Europe/Brussels /etc/localtime\n....\n\nUse UTC in hardware clock. Initialize the hardware clock from current\nsystem time. :\n\n....\nhwclock --systohc --utc\n....\n\nUse US locale :\n\n....\necho en_US.UTF-8 UTF-8 \u0026gt; /etc/locale.gen\nlocale-gen\necho LANG=en_US.UTF-8 \u0026gt; /etc/locale.conf\n....\n\nUse Belgian keymap :\n\n....\necho KEYMAP=be-latin1 \u0026gt; /etc/vconsole.conf\n....\n\nSet hostname :\n\n....\necho yeba \u0026gt; /etc/hostname\n....\n\nSet localhost alias :\n\n....\nvi /etc/hosts\n....\n\nIn /etc/hosts, add: :\n\n....\n127.0.0.1 yeba.localdomain yeba\n....\n\nSet password :\n\n....\npasswd\n....\n\nInstall boot loader \u0026#39;grub\u0026#39; :\n\n....\npacman -Syu grub\ngrub-install --target=i386-pc /dev/sda \u0026amp;\u0026amp; grub-mkconfig -o /boot/grub/grub.cfg\n....\n\nLeave chroot environment and shutdown VM :: exit shutdown now\n\nin settings of VM: Remove disk from virtual drive\n\nstart VM\n\n____\n***** snapshot : Fresh install*****\n____\n\n=== 4. A one-user system:\n\nAdd a non-root user, with \u0026#39;sudo\u0026#39; rights :\n\n....\nuseradd -m bert\ngroupadd sudoers\nusermod -aG sudoers bert\npasswd bert\n....\n\nenable NW-ing: :\n\n....\nsystemctl enable dhcpcd@enp0s3.service\nsystemctl start dhcpcd@enp0s3.service\n....\n\ncheck connection: :\n\n....\ncurl www.google.com\n....\n\nInstall \u0026#39;sudo\u0026#39; :\n\n....\npacman -Syu sudo\n....\n\nallow group \u0026#39;sudoers\u0026#39; to use sudo (in conf file): :\n\n....\nvisudo\n....\n\n--\u0026gt; add line: :\n\n....\n%sudoers    ALL=(ALL) ALL\n....\n\nlog out of root session: :\n\n....\nexit\n....\n\nlog back in as bert\n\ntest if sudo: :\n\n....\nsudo -v\n....\n\n(after entering password should not output anything if all is well)\n\n____\n***** snapshot : User bert, NW OK*****\n____\n\n=== 5. Virtualbox Guest Additions\n\nMake sure your version of Virtualbox matches the version of the Guest\nAdditions:\n\n____\n. VirtualBox:::\n  . Help/About VirtualBox . File/Check for updates\n\n. Arch Linux guest OS:\n____\n\n....\npacman -Ss virtualbox-guest-utils\n....\n\nInstall guest additions \u0026amp; hwinfo :\n\n....\nsudo pacman -Syu virtualbox-guest-utils hwinfo\n....\n\nDuring installation, choose package: :\n\n....\nvirtualbox-guest-modules-arch\n....\n\nEnable the service :\n\n....\nsudo systemctl enable vboxservice.service\n....\n\noutput: :\n\n....\ncreated symlink /etc/systemd/system/multi-user.target.wants/vboxservice.service\n-\u0026gt; /usr/lib/systemd/system/vboxservice.service.\n....\n\nStart the service :\n\n....\nsudo systemctl start vboxservice.service\n....\n\nReboot VM :\n\n....\nsudo reboot now\n....\n\nAnd log in again\n\nGrant access to shared folders :\n\n....\nsudo chmod 755 /media\nsudo usermod -aG vboxsf bert\n....\n\nLogout and -in for the latter change to take effect\n\n____\n***** snapshot : vbox guest additions*****\n____\n\n=== 6. Lots of packages\n\nInstall some necessary packages: :\n\n....\nsudo pacman -Syu base-devel clang git tig tmux time zip unzip dialog wget dos2unix hwinfo openssh knockd lighttpd ffmpeg python-mako python-sphinx asciidoc imagemagick poppler ghostscript fzf ripgrep fd moreutils\n....\n\nInstall xorg-related packages: :\n\n....\nsudo pacman -Syu gvim xorg-server xorg-xinit xorg-apps xorg-apps xorg-xfontsel xorg-fonts-misc xclip xsel scrot unclutter dmenu ttf-dejavu ttf-inconsolata adobe-source-code-pro-fonts\n....\n\nThe 2 previous commands can be combined by pasting all package names in\na text file in a vboxsf shared folder and running: :\n\n....\nsudo pacman -Syu - \u0026lt; /media/sf_pub/packages.txt\n....\n\nInstall dwm from AUR: :\n\n....\ncurl -L -O https://aur.archlinux.org/cgit/aur.git/snapshot/st.tar.gz\ncurl -L -O https://aur.archlinux.org/cgit/aur.git/snapshot/dwm.tar.gz\n\ntar xzvf st.tar.gz\ntar xzvf dwm.tar.gz\n\ncd st \u0026amp;\u0026amp; makepkg -si \u0026amp;\u0026amp; cd -\ncd dwm \u0026amp;\u0026amp; makepkg -si \u0026amp;\u0026amp; cd -\n....\n\n***** snapshot : Packages installed*****\n\n=== 7. Set up xorg, dwm\n\nEdit the config file read by \u0026#39;startx\u0026#39; :\n\n....\nvim ~/.xinitrc\n....\n\nWrite: :\n\n....\nVBoxClient --display\nVBoxClient --clipboard\nxrandr --output VGA-1 --mode 1920x1080\nsetxkbmap be\nunclutter -jitter 2 -noevents -root \u0026amp;\nexec dwm\n....\n\nStart xorg, and dwm :\n\n....\nstartx\n....\n\ndwm starts up alt-enter to open st session show all possible screen\nresolutions: :\n\n....\nxrandr\n....\n\n....\ndwm -v\n....\n\noutput: dwm-6.1\n\n....\nst -v\n....\n\noutput: st 0.7\n\nThe latter versions are identical to the effie setup\n\nShutdown VM\n\nWindows Command Prompt: :\n\n....\nVBoxManage setextradata \u0026#34;yeba\u0026#34; \u0026#34;CustomVideoMode1\u0026#34; \u0026#34;1600x900x24\u0026#34;\n....\n\nStart vm\n\nSet video resolution at startup :\n\n....\nsudoedit /etc/default/grub\n....\n\nFind the line starting with \u0026#39;GRUB_CMDLINE_LINUX_DEFAULT=\u0026#39; and change it:\n:\n\n....\nGRUB_CMDLINE_LINUX_DEFAULT=\u0026#34;quiet video=1600x900\u0026#34;\n....\n\nUpdate grub with the new config :\n\n....\nsudo grub-mkconfig -o /boot/grub/grub.cfg\n....\n\nAuto-login on TTY1: :\n\n....\nsudo systemctl edit getty@tty1\n....\n\nadd lines: :\n\n....\n[Service]\nExecStart=\nExecStart=-/usr/bin/agetty --autologin bert --noclear %I $TERM\n....\n\n=== 8. Personal tools and config\n\n::::\n  mkdir ~/tools \u0026amp;\u0026amp; cd ~/tools git clone\n  https://github.com/bergoid/lswrappers.git git clone\n  https://github.com/bergoid/rabot.git git clone\n  https://github.com/bergoid/gt.git git clone\n  https://github.com/bergoid/preppy.git git clone\n  https://github.com/bergoid/avtools.git git clone\n  https://github.com/bergoid/dotfiles.git dotfiles/install_dotfiles\n\nDo manually: :\n\n....\n~/tools/misc\n~/.gtpresets\n~/.ssh\n....\n\nyoutube-dl without pacman: :\n\n....\nsudo curl -L https://yt-dl.org/downloads/latest/youtube-dl -o /usr/local/bin/youtube-dl\nsudo chmod a+rx /usr/local/bin/youtube-dl\n....\n\nInstall knockd \u0026amp; reflector :\n\n....\nsudo pacman -Syu knockd reflector\n....\n\nUpdate mirrorlist: :\n\n....\nsudo reflector --age 6 --fastest 64 --protocol https --sort rate --save /etc/pacman.d/mirrorlist\n....\n\nSet remote URLS to ssh protocol: :\n\n....\ngit remote set-url origin github_bergoid:bergoid/anthos.git\n# etc ...\n....\n\n***** snapshot : Xorg, dwm, personal tools \u0026amp; config*****\n\n____\nCopy from effie:::\n  ~/notes.txt ~/cheatsheet.txt\n____\n\n=== 9. Set up webserver and host-\u0026gt;guest connectivity\n\n/home/bert/prj/webserver contains:::\n  etc/lighttpd.conf www/index.html\nsudo -i::\n  cd /srv \u0026amp;\u0026amp; rm -rf * mkdir log ln -s /home/bert/prj/webserver repo ln\n  -sf /etc/lighttpd.conf /srv/repo/etc/lighttpd.conf chmod 755\n  /home/bert\n/home/bert/prj/webserver/etc/lighttpd.conf:::\n  server.modules = (;;\n    \u0026#34;mod_access\u0026#34;, \u0026#34;mod_accesslog\u0026#34;, )\n  +\n  server.port = 80 server.username = \u0026#34;http\u0026#34; server.groupname = \u0026#34;http\u0026#34;\n  server.document-root = \u0026#34;/srv/repo/www\u0026#34; server.errorlog =\n  \u0026#34;/srv/log/error.log\u0026#34; accesslog.filename = \u0026#34;srv/log/access.log\u0026#34;\n  dir-listing.activate = \u0026#34;enable\u0026#34; index-file.names = ( \u0026#34;index.html\u0026#34; )\n  mimetype.assign = ( \u0026#34;.html\u0026#34; =\u0026gt; \u0026#34;text/html\u0026#34;, \u0026#34;.txt\u0026#34; =\u0026gt; \u0026#34;text/plain\u0026#34;,\n  \u0026#34;.css\u0026#34; =\u0026gt; \u0026#34;text/css\u0026#34;, \u0026#34;.js\u0026#34; =\u0026gt; \u0026#34;application/x-javascript\u0026#34;, \u0026#34;.jpg\u0026#34; =\u0026gt;\n  \u0026#34;image/jpeg\u0026#34;, \u0026#34;.jpeg\u0026#34; =\u0026gt; \u0026#34;image/jpeg\u0026#34;, \u0026#34;.gif\u0026#34; =\u0026gt; \u0026#34;image/gif\u0026#34;, \u0026#34;.png\u0026#34;\n  =\u0026gt; \u0026#34;image/png\u0026#34;, \u0026#34;\u0026#34; =\u0026gt; \u0026#34;application/octet-stream\u0026#34; )\n/home/bert/prj/webserver/www/index.html:::\n  Hello there!\n\nsudo systemctl start lighttpd.service sudo systemctl status\nlighttpd.service sudo systemctl enable lighttpd.service\n\ncurl localhost\n\nConfigure static IP address 192.168.56.110 and gateway 192.168.56.101\n(or whatever the IP address of the host-only adapter is):\n\nsudo ip link set enp0s8 down\n\n== With netctl:\n\n____\nsudoedit /etc/netctl/enp0s8::\n  Description=\u0026#39;yeba static ip address\u0026#39; Interface=enp0s8\n  Connection=ethernet IP=static Address=(\u0026#39;192.168.56.110/24\u0026#39;)\n\nsudo netctl start enp0s8 sudo netctl enable enp0s8\n____\n\n== With systemd-networkd:\n\nCheck if systemd-networkd is enabled:::\n  systemctl status systemd-networkd\nIf not:::\n  sudo systemctl restart systemd-networkd.service\nsudoedit /etc/systemd/network/20-wired.network::\n  [Match] Name=enp0s8\n  +\n  [Network] Address=192.168.56.110/24 DNS=192.168.56.101\n  +\n  [Route] Gateway=192.168.56.101 Destination=0.0.0.0/0 Metric=1024\n\nip link set enp0s8 up sudo systemctl restart systemd-networkd.service\n\n--\u0026gt; Visit 192.168.56.110 with browser on host OS\n\nTools for rp0w:\n\n____\nsudo pacman -Syu dosfstools wpa_supplicant qemu-headless\nqemu-headless-arch-extra\n____\n\nTools for React development:\n\n____\nsudo pacman -Syu npm sudo npm install -g create-react-app\n____\n\nAUR helper:\n\nsudo -i::\n  git clone https://aur.archlinux.org/pakku.git cd pakku makepkg -si\n\n***** CURRENT STATE*****\n\n=== 10. Further config\n\nTODO:\n\n. numlockx::\n  https://www.archlinux.org/packages/community/x86_64/numlockx/\n  https://github.com/rg3/numlockx\n\n. tmux scrollback\n\n. dwm monocle mode\n\nv autostart tmux 2 panes in every st terminal v change xorg clipboard v\nset vim yank buffer to xorg clipboard v bidir clipboard host/guest OK?\n"},{"id":3,"href":"/arch/pc.html","title":"Installing Arch Linux on a PC","section":"Arch","content":"This guide explains how to install vanilla Arch Linux on a PC. == Prerequisites * {blank} + A PC or a laptop, with::: ** a USB port ** wifi adapter ** a HDD with contents that are no longer needed * A USB stick with contents that are no longer needed. * A PC with a working operating system and internet access. This may also be the machine we will install Arch Linux on. We will assume a Linux(-like) environment with \u0026#39;curl\u0026#39; and \u0026#39;dd\u0026#39; The strategy is as follows: [arabic] . On the working PC, create a bootable USB stick with an Arch-based distro on it . On the PC destined for Arch installation, boot from this live-USB . In a bash terminal, install Arch on the HDD with the commands found in this guide == Creating a live-USB On the working PC, download the .iso file of an Arch-based distro. ArchBang for instance: : .... curl -LO https://sourceforge.net/projects/archbang/files/latest/download .... Plug in the USB stick and write the .iso file on it. Here we assume the USB stick is device \u0026#39;/dev/sdb\u0026#39;: : .... sudo -i dd bs=4M if=archbang-rc-1810-x86_64.iso of=/dev/sdb status=progress oflag=sync \u0026amp;\u0026amp; sync .... == Booting from the USB stick Make sure the USB stick is plugged into the PC meant for Arch Linux, (Re-)boot the machine and enter the boot menu immediately at startup (press F9 or F12, or so). In the boot menu, choose to boot from USB. Once the OS has finished starting up, and if you\u0026#39;re using wifi, set up your internet connection with the GUI. In the OpenBox desktop environment of ArchBang, this can be done in the lower right corner of the screen. Then, open a bash prompt and set your keyboard layout, if needed : .... setxkbmap be .... Test your internet connection : .... curl www.example.com .... Go into a root prompt : .... sudo -i .... Make sure the system clock on the host OS is synced with NTP : .... timedatectl set-ntp true .... == Install target OS TODO: wipe MBR due to FlexNet? (Re-)partition the HDD. We assume the device is \u0026#39;/dev/sda\u0026#39;. A possible partition layout is: [arabic] . 13G for the root partition . The swap partiton. Size: twice the amount of RAM. . The /home partition. Takes up the rest of the space. To create the partition table, follow the instructions in \u0026#39;fdisk\u0026#39;. : .... fdisk /dev/sda .... Format the partitions : .... mkfs.ext4 /dev/sda1 mkswap /dev/sda2 swapon /dev/sda2 mkfs.ext4 /dev/sda3 .... Mount the partitions : .... mkdir -p /mnt/targetfs mount /dev/sda1 /mnt/targetfs mkdir -p /mnt/targetfs/home mount /dev/sda3 /mnt/targetfs/home .... Update the mirrorlist according to your location. Move the URL of a server near you to the top of the file. : .... vi /etc/pacman.d/mirrorlist .... Install some initial packages on the target system : .... pacstrap /mnt/targetfs base grub sudo reflector .... Generate fstab file : .... genfstab -U /mnt/targetfs \u0026gt;\u0026gt; /mnt/targetfs/etc/fstab .... \u0026#39;chroot\u0026#39; into the target filsystem : .... arch-chroot /mnt/targetfs .... Set your timezone : .... ln -sf /usr/share/zoneinfo/Europe/Brussels /etc/localtime .... Use UTC on the hardware clock : .... hwclock --systohc --utc .... Set the locale : .... echo en_US.UTF-8 UTF-8 \u0026gt; /etc/locale.gen locale-gen echo LANG=en_US.UTF-8 \u0026gt; /etc/locale.conf .... Set the keyboard layout on the target system : .... echo KEYMAP=be-latin1 \u0026gt; /etc/vconsole.conf .... Set the hostname : .... echo tuma \u0026gt; /etc/hostname .... Set hostname as an alias for localhost : .... echo \u0026#34;127.0.0.1 tuma.localdomain tuma\u0026#34; \u0026gt;\u0026gt; /etc/hosts .... Set the root password : .... passwd .... Add a non-root user, with \u0026#39;sudo\u0026#39; rights : .... groupadd sudoers \u0026amp;\u0026amp; useradd -G sudoers -m bert .... Allow root and group ‘sudoers’ to use sudo : .... echo \u0026#34;# sudoers file. Use \u0026#39;sudo visudo\u0026#39; to edit. See \u0026#39;man sudoers\u0026#39; and \u0026#39;man visudo\u0026#39;\u0026#34; \u0026gt; /etc/sudoers echo \u0026#34;%sudoers ALL=(ALL) ALL\u0026#34; \u0026gt;\u0026gt; /etc/sudoers echo \u0026#34;root ALL=(ALL) ALL\u0026#34; \u0026gt;\u0026gt; /etc/sudoers .... Set the password for this user : .... passwd bert .... Update \u0026amp; sort mirrorlist : .... reflector --age 12 --protocol https --sort rate --save /etc/pacman.d/mirrorlist .... Install some necessary packages: : .... pacman -Syu base-devel clang git vim tmux time zip unzip dialog dos2unix hwinfo haveged arch-install-scripts wpa_supplicant openssh knockd .... Install some more optional packages: : .... pacman -Syu lighttpd ffmpeg python-mako python-sphinx asciidoc .... Install xorg-related packages: : .... sudo pacman -Syu xorg-server xorg-xinit xorg-apps xorg-apps xorg-xfontsel xorg-fonts-misc unclutter dmenu ttf-inconsolata firefox .... Install boot loader \u0026#39;grub\u0026#39; : .... grub-install --target=i386-pc /dev/sda .... Edit the grub config file: : .... sudoedit /etc/default/grub .... Change the value of the variable into this: : .... GRUB_CMDLINE_LINUX_DEFAULT=”quiet video=SVIDEO-1:d” .... Re-configure grub : .... sudo grub-mkconfig -o /boot/grub/grub.cfg .... Leave the \u0026#39;chroot\u0026#39; environment : .... exit .... Reboot into the installed OS : .... reboot now .... == Set up networking Log in with the just-created non-root user. List the network interfaces : .... ip link .... In the output you should see something like this: : .... wlp16s0: ... .... Use a user-friendly GUI tool to setup a wireless connection : .... sudo wifi-menu -o .... Back in the bash terminal, test internet access. If this fails, wait a few seconds and try again. : .... curl www.example.com .... Enable the netctl profile, so that it auto-starts after reboot. If you named your profile \u0026#39;mywifi\u0026#39; in the \u0026#39;wifi-menu\u0026#39; tool, the command looks like this: : .... sudo netctl enable mywifi .... == Set up the window manager Enable the \u0026#39;haveged\u0026#39; entropy daemon : .... sudo systemctl start haveged sudo systemctl enable haveged .... Auto-login at startup : .... sudo systemctl edit getty@tty1 .... Add the lines: : .... [Service] ExecStart= ExecStart=-/usr/bin/agetty --autologin bert --noclear %I $TERM .... Download a customized version of \u0026#39;dwm\u0026#39;, \u0026#39;st\u0026#39; and \u0026#39;dmenu\u0026#39;, and build \u0026amp; install them : .... cd ~ mkdir prj cd prj git clone https://github.com/bergoid/dwm.git cd dwm sudo ./rebuild .... Edit .xinitrc : .... vi ~/.xinitrc .... And make sure it has the following contents: : .... setxkbmap be unclutter -jitter 2 -noevents -root \u0026amp; exec dwm .... Start dwm : .... startx .... Once you have installed \u0026#39;dotfiles\u0026#39; from \u0026#34;Personal tools\u0026#34;, dwm will auto-start at startup. == Personal tools Install git repos : .... mkdir ~/tools \u0026amp;\u0026amp; cd ~/tools git clone https://github.com/bergoid/lswrappers.git git clone https://github.com/bergoid/rabot.git git clone https://github.com/bergoid/gt.git git clone https://github.com/bergoid/preppy.git git clone https://github.com/bergoid/avtools.git git clone https://github.com/bergoid/dotfiles.git dotfiles/install_dotfiles .... youtube-dl without pacman: : .... sudo curl -L https://yt-dl.org/downloads/latest/youtube-dl -o /usr/local/bin/youtube-dl sudo chmod a+rx /usr/local/bin/youtube-dl .... \u0026#39;\u0026#39;\u0026#39;\u0026#39;\u0026#39; TODO: pikaur disallow root login? sshd config from VPS acpi events: lid, power button "},{"id":4,"href":"/sicp/chapter01/exercise-1.07.html","title":"Exercise 1.07","section":"Sicp","content":"= Exercise 1.07\n\n== Background: Section 1.1.7, Square Roots by Newton\u0026#39;s Method\n\n[source,scheme]\n----\n(define (square x) (* x x))\n\n(define (average x y)\n  (/ (+ x y) 2))\n\n(define (improve guess x)\n  (average guess (/ x guess)))\n\n(define (good-enough? guess x)\n  (\u0026lt; (abs (- (square guess) x)) 0.001))\n\n(define (sqrt-iter guess x)\n  (if (good-enough? guess x)\n      guess\n      (sqrt-iter (improve guess x)\n                 x)))\n\n(define (sqrt x)\n  (sqrt-iter 1.0 x))\n----\n\n== Question:\n\nThe `good-enough?` test used in computing square roots will not be very\neffective for finding the square roots of very small numbers. Also, in\nreal computers, arithmetic operations are almost always performed with\nlimited precision. This makes our test inadequate for very large\nnumbers. Explain these statements, with examples showing how the test\nfails for small and large numbers. An alternative strategy for\nimplementing `good-enough?` is to watch how `guess` changes from one\niteration to the next and to stop when the change is a very small\nfraction of the guess. Design a square-root procedure that uses this\nkind of end test. Does this work better for small and large numbers?\n\n== Answer:\n\n=== For small numbers:\n\nWhen we take the `sqrt` of - for example - `0.0001`:\n\n[source,scheme]\n----\n\u0026gt; (sqrt 0.0001)\n0.03230844833048122\n----\n\ninstead of the expected `0.01` we get `0.0323 ...` because the latter\u0026#39;s\nsquare is so close to `0.0001` that the difference is less than `0.001`\n- the error margin used in `good-enough?`.\n\nIf we replace `good-enough?` with:\n\n[source,scheme]\n----\n(define (good-enough? guess x)\n  (\u0026lt; (abs (- (square guess) x)) (/ guess 1e4)))\n----\n\ntodo\n\n"},{"id":5,"href":"/sicp/chapter01/exercise-1.06.html","title":"Exercise 1.06","section":"Sicp","content":"= Exercise 1.06\n\n== Background: Section 1.1.7, Square Roots by Newton\u0026#39;s Method\n\n[source,scheme]\n----\n(define (square x) (* x x))\n\n(define (average x y)\n  (/ (+ x y) 2))\n\n(define (improve guess x)\n  (average guess (/ x guess)))\n\n(define (good-enough? guess x)\n  (\u0026lt; (abs (- (square guess) x)) 0.001))\n\n(define (sqrt-iter guess x)\n  (if (good-enough? guess x)\n      guess\n      (sqrt-iter (improve guess x)\n                 x)))\n\n(define (sqrt x)\n  (sqrt-iter 1.0 x))\n----\n\n== Question:\n\nAlyssa P. Hacker doesn\u0026#39;t see why `if` needs to be provided as a special\nform. \u0026#34;Why can\u0026#39;t I just define it as an ordinary procedure in terms of\n`cond`?\u0026#34; she asks. Alyssa\u0026#39;s friend Eva Lu Ator claims this can indeed be\ndone, and she defines a new version of `if`:\n\n[source,scheme]\n----\n(define (new-if predicate then-clause else-clause)\n  (cond (predicate then-clause)\n        (else else-clause)))\n----\n\nEva demonstrates the program for Alyssa:\n\n[source,scheme]\n----\n(new-if (= 2 3) 0 5)\n5\n\n(new-if (= 1 1) 0 5)\n0\n----\n\nDelighted, Alyssa uses new-if to rewrite the square-root program:\n\n[source,scheme]\n----\n(define (sqrt-iter guess x)\n  (new-if (good-enough? guess x)\n          guess\n          (sqrt-iter (improve guess x)\n                     x)))\n----\n\nWhat happens when Alyssa attempts to use this to compute square roots?\nExplain.\n\n== Answer:\n\nThe program gets stuck in an infinite loop.\n\nAs `new-if` is not a special form, both the _consequent_ and the\n_alternative_ expression are always evaluated, regardless of the value\nof the _predicate_. So, in the case of `sqrt-iter` the call to\n`(sqrt-iter ...)` in the _consequent_ is endlessly recursive, and never\nfinishes.\n\n"},{"id":6,"href":"/sicp/chapter01/exercise-1.05.html","title":"Exercise 1.05","section":"Sicp","content":"= Exercise 1.05\n\n== Question:\n\nBen Bitdiddle has invented a test to determine whether the interpreter\nhe is faced with is using applicative-order evaluation or normal-order\nevaluation. He defines the following two procedures:\n\n[source,scheme]\n----\n(define (p) (p))\n\n(define (test x y)\n  (if (= x 0)\n      0\n      y))\n----\n\nThen he evaluates the expression\n\n[source,scheme]\n----\n(test 0 (p))\n----\n\nWhat behavior will Ben observe with an interpreter that uses\napplicative-order evaluation? What behavior will he observe with an\ninterpreter that uses normal-order evaluation? Explain your answer.\n(Assume that the evaluation rule for the special form `if` is the same\nwhether the interpreter is using normal or applicative order: The\npredicate expression is evaluated first, and the result determines\nwhether to evaluate the consequent or the alternative expression.)\n\n== Answer:\n\n=== Applicative-order evaluation:\n\nThe program gets stuck in an infinite loop.\n\nWhen the program evaluates the second operand in the call `(test 0 (p))`\nit will substitute `(p)` with its definition. As this definition is also\n`(p)`, the substitution process is endlessly recursive.\n\n=== Normal-order evaluation:\n\nThe program returns `0`.\n\nWhen `(test 0 (p))` is called, its operands are not evaluated\nimmediately. Instead, the procedure `test` is expanded to:\n\n[source,scheme]\n----\n(if (= 0 0)\n    0\n    (p)))\n----\n\nThe _predicate_ in the special form `if` evaluates to `true`, so the\n_alternative_ `(p)` is never evaluated and the _consequent_\u0026#39;s value `0`\nis returned.\n\n"},{"id":7,"href":"/sicp/chapter01/exercise-1.04.html","title":"Exercise 1.04","section":"Sicp","content":"= Exercise 1.04\n\n== Question:\n\nObserve that our model of evaluation allows for combinations whose\noperators are compound expressions. Use this observation to describe the\nbehavior of the following procedure:\n\n[source,scheme]\n----\n(define (a-plus-abs-b a b)\n    ((if (\u0026gt; b 0) + -) a b))\n----\n\n== Answer:\n\nIn the body of `a-plus-abs-b a b`, the expression `(if (\u0026gt; b 0) + -)`\nevaluates to an arithmetic operation (either `+` or `-`, depending on\nthe sign of `b`\u0026#39;s actual argument). The interpreter obtains a primitive\nprocedure that it applies to the arguments replacing the formal\nparameters `a` and `b`.\n\n"},{"id":8,"href":"/sicp/chapter01/exercise-1.03.html","title":"Exercise 1.03","section":"Sicp","content":"= Exercise 1.03\n\n== Question:\n\nDefine a procedure that takes three numbers as arguments and returns the\nsum of the squares of the two larger numbers.\n\n== Answer:\n\n[source,scheme]\n----\n(define (square x) (* x x))\n\n(define (sum-of-squares x y) (+ (square x) (square y)))\n\n(define (sum-squares-larger a b c)\n    (cond ((and (\u0026lt;= a b) (\u0026lt;= a c)) (sum-of-squares b c))\n          ((and (\u0026lt;= b a) (\u0026lt;= b c)) (sum-of-squares a c))\n          (else (sum-of-squares a b))))\n----\n\n"},{"id":9,"href":"/sicp/chapter01/exercise-1.02.html","title":"Exercise 1.02","section":"Sicp","content":"= Exercise 1.02\n\n== Question:\n\ntodo\n\n[source,scheme]\n----\n(+ 1 2)\n----\n\n== Answer:\n\ntodo\n\n"},{"id":10,"href":"/sicp/chapter01/exercise-1.01.html","title":"Exercise 1.01","section":"Sicp","content":"== Question:\n\nBelow is a sequence of expressions. What is the result printed by the\ninterpreter in response to each expression? Assume that the sequence is\nto be evaluated in the order in which it is presented.\n\n[source,scheme]\n----\n10\n(+ 5 3 4)\n(- 9 1)\n(/ 6 2)\n(+ (* 2 4) (- 4 6))\n(define a 3)\n(define b (+ a 1))\n(+ a b (* a b))\n(= a b)\n(if (and (\u0026gt; b a) (\u0026lt; b (* a b)))\n    b\n    a)\n(cond ((= a 4) 6)\n      ((= b 4) (+ 6 7 a))\n      (else 25))\n(+ 2 (if (\u0026gt; b a) b a))\n(* (cond ((\u0026gt; a b) a)\n         ((\u0026lt; a b) b)\n         (else -1))\n   (+ a 1))\n----\n\n== Answer:\n\n[source,scheme]\n----\n\u0026gt; 10\n10\n\u0026gt; (+ 5 3 4)\n12\n\u0026gt; (- 9 1)\n8\n\u0026gt; (/ 6 2)\n3\n\u0026gt; (+ (* 2 4) (- 4 6))\n6\n\u0026gt; (define a 3)\n\u0026gt; (define b (+ a 1))\n\u0026gt; (+ a b (* a b))\n19\n\u0026gt; (= a b)\n#f\n\u0026gt; (if (and (\u0026gt; b a) (\u0026lt; b (* a b)))\n    b\n    a)\n4\n\u0026gt; (cond ((= a 4) 6)\n      ((= b 4) (+ 6 7 a))\n      (else 25))\n16\n\u0026gt; (+ 2 (if (\u0026gt; b a) b a))\n6\n\u0026gt; (* (cond ((\u0026gt; a b) a)\n         ((\u0026lt; a b) b)\n         (else -1))\n   (+ a 1))\n16\n----\n\n"},{"id":11,"href":"/notes/mctips.html","title":"Minecraft tips","section":"Notes","content":"== Hoofden zetten\n\nPlaats het hoofd van `SpelerNaam` in je inventaris: :\n\n....\n/give @p skull 1 3 {SkullOwner:\u0026#34;SpelerNaam\u0026#34;}\n....\n\nPlaats het hoofd van een ghast in je inventaris: :\n\n....\n/give @p skull 1 3 {SkullOwner:\u0026#34;MHF_Ghast\u0026#34;}\n....\n\nVoor andere mobs: vervang `MHF_Ghast` door: :\n\n....\nMHF_Alex\nMHF_Blaze\nMHF_CaveSpider\nMHF_Chicken\nMHF_Cow\nMHF_Creeper\nMHF_Enderman\nMHF_Ghast\nMHF_Golem\nMHF_Herobrine\nMHF_LavaSlime\nMHF_MushroomCow\nMHF_Ocelot\nMHF_Pig\nMHF_PigZombie\nMHF_Sheep\nMHF_Skeleton\nMHF_Slime\nMHF_Spider\nMHF_Squid\nMHF_Steve\nMHF_Villager\nMHF_WSkeleton\nMHF_Zombie\n....\n\nBlokken: :\n\n....\nMHF_Cactus\nMHF_Cake\nMHF_Chest\nMHF_CoconutB\nMHF_CoconutG\nMHF_Melon\nMHF_OakLog\nMHF_Present1\nMHF_Present2\nMHF_Pumpkin\nMHF_TNT\nMHF_TNT2\n....\n\nBonus: :\n\n....\nMHF_ArrowUp\nMHF_ArrowDown\nMHF_ArrowLeft\nMHF_ArrowRight\nMHF_Exclamation\nMHF_Question\n....\n\n"},{"id":12,"href":"/notes/babs.html","title":"Babs","section":"Notes","content":"== Introduction\n\n`babs`, (an acronym for \u0026#34;**b**abs: *a* **b**uild **s**ystem\u0026#34;) is a set\nof Makefiles meant to easily compile \u0026amp; link a set of interdependent\nmodules, containing C/C++ source code, binaries like object files,\nstatic or dynamic libraries, etc ...\n\n== Environment variables\n\nIn order to do its work, `babs` needs 3 environment variables:\n\n* `BABS_DIR` : the directory where the `babs` build system is located.\n* `SOURCE_DIR` : the directory where the source modules are located.\n* `BUILD_DIR` : the directory where all target and intermediate files\nare saved during the build process.\n\nThese variables are currently set by sourcing a script before running\n`make`. Ideally, they should be set while running`make`.\n\n== Files\n\n=== `babs` build system\n\n==== Folder structure\n\n....\nbabs/\n    module_common.mk\n    make_common.mk\n    platform/\n        platform.mk\n        windows/\n            rules.mk\n            definitions.mk\n            libstdc++-6.dll\n            libgcc_s_dw2-1.dll\n        linux/\n            rules.mk\n            definitions.mk\nsource/\n    config.mk\n    setenv\n....\n\n===== module_common.mk\n\n===== make_common.mk\n\n== Using `babs`\n\n=== A minimal example\n\n"},{"id":13,"href":"/notes/rp0w.html","title":"Headless install of Arch Linux on Raspberry Pi Zero W","section":"Notes","content":"= Headless install of Arch Linux on Raspberry Pi Zero W\n\n== Prerequisites\n\nArch Linux, with the following packages:::\n  dosfstools wpa_supplicant\n\nMicro SD card\n\nUSB stick with slot for Micro SD Card\n\nRaspberry Pi Zero W\n\n== Create an Arch Linux ARM system\n\nTODO : chroot binfmt qemu\n\n== Partition Micro SD Card\n\nIn Linux, list the available devices: :\n\n....\nsudo fdisk -l\n....\n\nIf Linux is running inside VirtualBox, consult the list of devices in:\nDevices\u0026gt;USB\n\nInsert the Micro SD card in the USB adapter, and insert the adapter in a\nUSB port.\n\nIf Linux is running inside VirtualBox, look up \u0026amp; select the new device\nthat appeared in Devices\u0026gt;USB\n\nList the available devices again: :\n\n....\nsudo fdisk -l\n....\n\nThe device that was added to the list is the Micro SD card.\n\n== Useful commands\n\nSave existing partition layout: :\n\n....\nsudo sfdisk -d /dev/sdc \u0026gt; part_layout.txt\n....\n\nPartition a card according to a saved layout: :\n\n....\nsudo sfdisk /dev/sdc \u0026lt; part_layout.txt\n....\n\nDelete all partitions: :\n\n....\nsudo sfdisk --delete /dev/sdc\n....\n\n== References\n\nhttps://archlinuxarm.org/platforms/armv6/raspberry-pi\n\nhttps://ladvien.com/installing-arch-linux-raspberry-pi-zero-w/\n\nhttps://wiki.debian.org/QemuUserEmulation\n\nhttp://blog.thijsbroenink.com/2015/10/emulate-file-system-with-different-architecture/\n\nhttps://raspberrypi.stackexchange.com/questions/165/emulation-on-a-linux-pc\n\n\n"},{"id":14,"href":"/testbed/highlight.html","title":"Syntax highlighting","section":"Testbed","content":"== C++ program [source,c++] ---- #include using namespace std; int main() { cout \u0026lt;\u0026lt; \u0026#34;Hello world!\u0026#34; \u0026lt;\u0026lt; endl; return 0; } ---- == C program [source,c] ---- #include #include #include int main(int argc, char **argv) { void *handle; char *error; void (*fun)(); char fileName[300]; char* buildDir = getenv(\u0026#34;BUILD_DIR\u0026#34;); sprintf(fileName, \u0026#34;%s/toolkit/libtoolkit.so.1.0.0\u0026#34;, buildDir); printf(\u0026#34;fileName = %s\\n\u0026#34;, fileName); printf(\u0026#34;mark1\\n\u0026#34;); dlerror(); handle = dlopen ( fileName , RTLD_LAZY); if (!handle) { fputs (dlerror(), stderr); printf(\u0026#34;\\n\u0026#34;); exit(1); } printf(\u0026#34;mark2\\n\u0026#34;); fun = (void (*)()) dlsym(handle, \u0026#34;testfun1\u0026#34;); if ((error = dlerror()) != NULL) { fputs(error, stderr); printf(\u0026#34;\\n\u0026#34;); exit(1); } printf(\u0026#34;mark3\\n\u0026#34;); (*fun)(); printf(\u0026#34;mark4\\n\u0026#34;); dlclose(handle); } ---- == Python program [source,python] ---- def my_function(): \u0026#34;just a test\u0026#34; print 8/2 ---- == bash script [source,bash] ---- #!/bin/bash if [ -z \u0026#34;$1\u0026#34; ]; then echo \u0026#34;Usage: $(basename $0) COMMAND\u0026#34; exit 0 fi . ~/tools/common.sh if [ \u0026#34;$?\u0026#34; -ne \u0026#34;0\u0026#34; ]; then echo \u0026#34;$0: Error while sourcing ~/tools/common.sh\u0026#34; \u0026gt;\u0026amp;2 exit 1 fi checkPrereq ~/tools/timestamp_id checkPrereq ~/tools/fullts logDir=${LOGOP_DIR:-~/log} fileName=\u0026#34;$(timestamp_id).txt\u0026#34; logFile=\u0026#34;$logDir/$fileName\u0026#34; # Obtain path to external time command, to avoid having to use # the limited shell built-in command. timeCmd=$(which time) # Print header echo ==== Start log: `date \u0026#39;+%Y-%m-%d %H:%M:%S\u0026#39;` | tee -a \u0026#34;$logFile\u0026#34; echo ==== Command: $* | tee -a \u0026#34;$logFile\u0026#34; echo ==== Logfile: $logFile | tee -a \u0026#34;$logFile\u0026#34; echo ==== Logscript: $(readlink -f $0) | tee -a \u0026#34;$logFile\u0026#34; echo | tee -a \u0026#34;$logFile\u0026#34; # Run the command and log its output $timeCmd -f \u0026#34;\\n==== Exit status: %x\\n==== Elapsed: %e seconds\u0026#34; $* 2\u0026gt;\u0026amp;1 | tee -a \u0026#34;$logFile\u0026#34; # Print footer echo ==== End log: `date \u0026#39;+%Y-%m-%d %H:%M:%S\u0026#39;` | tee -a \u0026#34;$logFile\u0026#34; # Update symlink \u0026#39;latest.txt\u0026#39; to point to latest logfile ln -sf \u0026#34;$fileName\u0026#34; \u0026#34;$logDir/latest.txt\u0026#34; ---- "},{"id":15,"href":"/notes/android.html","title":"Android","section":"Notes","content":"= Android\n\n== Nexus 10\n\n=== Boot in recovery mode\n\nhttps://www.android.gs/how-to-boot-google-nexus-10-recovery-mode/\n\n==== Reset to factory defaults\n\nhttps://www.android.gs/how-to-hard-reset-the-google-nexus-10/\n\n"},{"id":16,"href":"/notes/cheatsheet.html","title":"Cheatsheet","section":"Notes","content":"= Cheat Sheet == Check folder size: .... du -sh foldername/ .... == Clear trash folder (Ubuntu \u0026amp; friends): .... rm -rf ~/.local/share/Trash/files ~/.local/share/Trash/info .... == Arch Linux guest VM in VirtualBox: === Restore networking: .... sudo ip link set enp0s8 down \u0026amp;\u0026amp; sudo ip link set enp0s8 up \u0026amp;\u0026amp; curl www.google.com .... === Mount USB drive Before inserting the USB drive, show list of devices: : .... sudo lsblk -f .... Insert USB drive, and select device in VirtualBox GUI menu ( Devices \u0026gt; USB \u0026gt; ... ) In VM, show list of devices again to find the DEVICENAME of the new device: : .... sudo lsblk -f .... Mount the device: : .... sudo -i mkdir /mnt/usbstick mount /dev/DEVICENAME /mnt/usbstick .... == wget Mirror site: : .... wget -mkE http://www.example.com .... Mirror subdirectory of website: : .... wget -mkE -np http://www.example.com/subdir/ .... Mirror full web page: : .... wget -pkE -np -nH -nd http://www.example.com/page.html wget -np -k -p -nd -nH -H -E http://www.example.com/page.html .... Related: extract URLs (\u0026#39;http://...\u0026#39; ones) from HTML file: : .... sed \u0026#39;s//\\n/g\u0026#39; | grep \u0026#34;^http:\u0026#34; | sort -u .... == youtube-dl Download video from YouTube: : .... youtube-dl \u0026#34;URL\u0026#34; .... Download audio from YouTube: : .... youtube-dl -x -o \u0026#34;%(title)s.%(ext)s\u0026#34; \u0026#34;URL\u0026#34; .... Download audio \u0026amp; convert to mp3: : .... youtube-dl -x --audio-format \u0026#34;mp3\u0026#34; -o \u0026#34;%(title)s.%(ext)s\u0026#34; \u0026#34;URL\u0026#34; .... Download videos listed in urls.txt: : .... cat urls.txt | xargs -I{} youtube-dl \u0026#34;{}\u0026#34; .... Download audio of videos listed in urls.txt: : .... cat urls.txt | xargs -I{} youtube-dl -x -o \u0026#34;%(autonumber)s - %(title)s.%(ext)s\u0026#34; \u0026#34;{}\u0026#34; .... Update program: : .... sudo youtube-dl -U .... == zenity Zenity menu: : .... zenity --width=640 --height=480 --list --column \u0026#34;Number\u0026#34; --column \u0026#34;Name\u0026#34; --title=\u0026#34;Numbers and their names\u0026#34; --text=\u0026#34;\u0026#34; 1 one 2 two 3 three .... Zenity menu from textfile, 1st line is the title, 2nd line are the column names, separated by tab characters, rest of the file are line entries separated by newlines, divided in columns by tab characters: : .... eval zenity --width=640 --height=480 --list $(cat menu.txt | sed \u0026#39;2q;d\u0026#39; | tr \u0026#39;\\t\u0026#39; \u0026#39;\\n\u0026#39; | sed \u0026#39;s/^/--column\\ \\\u0026#34;/\u0026#39; | sed \u0026#39;s/$/\\\u0026#34;/\u0026#39; | tr \u0026#39;\\n\u0026#39; \u0026#39; \u0026#39;) --title=$(cat menu.txt | head -n 1 | sed \u0026#39;s/^/\\\u0026#34;/\u0026#39; | sed \u0026#39;s/$/\\\u0026#34;/\u0026#39; | tr \u0026#39;\\n\u0026#39; \u0026#39; \u0026#39;) $(cat menu.txt | tail -n +3 | tr \u0026#39;\\t\u0026#39; \u0026#39;\\n\u0026#39; | sed \u0026#39;s/^/\\\u0026#34;/\u0026#39; | sed \u0026#39;s/$/\\\u0026#34;/\u0026#39; | tr \u0026#39;\\n\u0026#39; \u0026#39; \u0026#39;) .... == tail .... tail -f /var/log/messages .... == mount Mount ext3 partition: : .... sudo mkdir /media/bigpart sudo mount /dev/sda4 /media/bigpart -t ext3 .... Auto-mount USB drive at startup. Files owned by user with uid==1000. Put this in `/etc/fstab`: .... UUID=5F04-234F /media/USB_HDD auto nosuid,nodev,nofail,uid=1000,gid=1000,umask=022,fmask=133,dmask=022 0 0 .... Remarks: . The value for UUID can be obtained with the command `blkid`. . The mount point (in this case `/media/USB_HDD`) must exist. . The octal permission masks are not the same as in `chmod`. Subtract every digit from 7 to convert between the two. See table below. [cols=\u0026#34;1,1,1\u0026#34;] |=== |Symbolic |`chmod` |`fstab` |`-rw-r--r--` |644 |133 |`rwxr-xr-x` |755|022 |=== == bash === Redirection in bash Redirect stderr of command to stdout: : .... ls 2\u0026gt;\u0026amp;1 .... Don\u0026#39;t output anything: : .... ls \u0026gt; /dev/null 2\u0026gt;\u0026amp;1 .... Echo to stderr: : .... echo Hello \u0026gt;\u0026amp;2 .... Iterate over output of command, one line per iteration, and write output to a file: : .... while read line; do echo Another line: $line done \u0026lt; \u0026lt;(some_command arg1 arg2) \u0026gt; afile.txt .... Send value of a variable as standard input (stdin) to a command, and capture output in another variable: : .... $ myvar=\u0026#34;one two\u0026#34; $ yourvar=$(tr \u0026#39; \u0026#39; \u0026#39;_\u0026#39; \u0026lt;\u0026lt;\u0026lt;$myvar) $ echo $yourvar one_two .... Send value of a variable as input to a chain of piped commands, and capture output in another variable: : .... $ myvar=abcde $ yourvar=$(tr \u0026#39;a\u0026#39; \u0026#39;b\u0026#39; \u0026lt;\u0026lt;\u0026lt;$myvar | tr \u0026#39;b\u0026#39; \u0026#39;c\u0026#39; | tr \u0026#39;c\u0026#39; \u0026#39;d\u0026#39;) $ echo $yourvar dddde .... Truncate a file (wipe its contents): : .... \u0026gt; myfile.txt .... === Booleans in bash .... hot=true if $hot; then echo \u0026#34;It\u0026#39;s hot\u0026#34; else echo \u0026#34;It\u0026#39;s cold\u0026#34; fi .... === Globbing in bash Test if glob expands to anything: : .... theGlob=*.html if stat -t $theGlob \u0026gt; /dev/null 2\u0026gt;\u0026amp;1; then echo *.html else echo No matches found. fi .... or with \u0026#34;find\u0026#34;: : .... theGlob=*.html if [ -n \u0026#34;$(find . -maxdepth 1 -name \u0026#34;$theGlob\u0026#34; -print -quit)\u0026#34; ]; then echo *.html else echo No matches found. fi .... === Variable assignment in bash Set the variable logDir to $LOG_DIR, or \u0026#39;~/log\u0026#39; if $LOG_DIR is an empty string: : .... logDir=${LOG_DIR:-~/log} .... Example: : .... $ someVar=foo $ emptyVar= $ myVar=${someVar:-bar} $ yourVar=${emptyVar:-bar} $ echo myVar = $myVar; echo yourVar = $yourVar myVar = foo yourVar = bar .... Set the variable myVar to \u0026#39;foo\u0026#39; if $myVar is an empty string, otherwise leave myVar unchanged : .... : ${myVar:=foo} .... Example: : .... $ myVar=foo $ yourVar= $ : ${myVar:=bar} $ : ${yourVar:=bar} $ echo myVar = $myVar; echo yourVar = $yourVar myVar = foo yourVar = bar .... Equivalent of ternary operator in bash: : .... [[ \u0026#34;$year\u0026#34; = \u0026#34;leapyear\u0026#34; ]] \u0026amp;\u0026amp; numdays=366 || numdays=365 .... === Keyboard shortcuts in bash: Clear screen: : .... ctrl-l .... Open editor to write command in: : .... Ctrlv-XE .... Keyboard shortcuts (from: http://www.getoffmalawn.com/blog/useful-bash-shortcuts): : .... Movement -------- Shortcut Action Ctrl-a Move to the start of the line Ctrl-e Move to the end of the line Ctrl-b Move back one character Alt-b Move back one word Ctrl-f Move forward one character Alt-f Move forward one word Ctrl-] x Move the cursor forward to next occurance of x Alt-Ctrl-] x Move the cursor backward to the next occurance of x Line Modification ----------------- Shortcut Action Ctrl-u Delete from the cursor to the beginning of the line Ctrl-k Delete from the cursor to the end of the line Esc Backspace Delete back a word Alt-d Delete forward a word Alt-r Undo all changes to the line Ctrl-y Paste any text deleted with previous shortcuts Ctrl-e Esc-t Swap order of the last two arguments History Utilisation ------------------- Shortcut Action Ctrl-x Ctrl-u Undo the last change to the line Ctrl-r Incremental reverse search of history Alt-p Non-incremental reverse search of history Ctrl-L Clear the screen (doesn\u0026#39;t wipe current line) !! Execute last command in history !abc Execute last command in history beginning with abc !n Execute nth command in history !$ Last argument of previous command !^ First argument of previous command ^abc^xyz Replace first occurance of abc with xyz in previous command and execute it Alt-. (period) Paste last word from previous command after cursor position (repeat to cycle through previous commands) .... === Miscellaneous bash commands: List commands found in bash history, sorted by usage: : .... cat ~/.bash_history | cut -f1 -d\u0026#39; \u0026#39; | sort | uniq -c | sort -n -r | more .... == ln Create hard links in a folder to all files in another folder, eg: : .... ln -t ~/.gnome2/nautilus-scripts ~/tools/nautilus/* .... Create symbolic link named \u0026#39;LNK\u0026#39; to target file named \u0026#39;TGT\u0026#39;: : .... ln -s TGT LNK .... Run command in background and return to shell immediately (e.g. \u0026#39;firefox index.html\u0026#39;). Don\u0026#39;t write any output to nohup.out. : .... nohup firefox index.html \u0026gt; /dev/null 2\u0026gt;\u0026amp;1 .... == tar Create tar.gz from directory: : .... tar cpzf mydir.tar.gz mydir .... Extract directory from tar.gz file: : .... tar xzf mydir.tar.gz .... == Check Linux version .... cat /etc/issue .... or .... lsb_release -a .... or .... cat /etc/lsb-release .... or .... uname -a .... or .... cat /proc/version .... == Logfiles Browse syslog with vim (requires https://github.com/bergoid/rabot): : .... find /var/log -maxdepth 1 | grep syslog | sort | flon .... == Batch renaming Replace a substring \u0026#39;foo\u0026#39; with \u0026#39;bar\u0026#39; in all names of textfiles Output every renaming command for review: : .... for filename in *.txt ; do echo mv \\\u0026#34;$filename\\\u0026#34; \\\u0026#34;${filename//foo/bar}\\\u0026#34;; done .... Execute the reviewed commands: : .... for filename in *.txt ; do echo mv \\\u0026#34;$filename\\\u0026#34; \\\u0026#34;${filename//foo/bar}\\\u0026#34;; done | /bin/bash .... == ls, find, grep List all filenames in directory tree: : .... find . -print .... or: : .... find . .... or: : .... find $(pwd) .... List files in reverse chronological order: : .... ls -lt .... List the the most recently modified files in directory tree: : .... find . -type f -exec stat --format \u0026#39;%Y :%y %n\u0026#39; {} \\; | sort -nr | cut -d: -f2- | head .... List files in reverse order by size: : .... ls -lS .... List only filenames: : .... ls -m1 .... Find all files matching \u0026#39;*.c\u0026#39;: : .... find . -name \\*.c .... Find directories named \u0026#39;mydir\u0026#39;: : .... find . -type d -name mydir .... Search for \u0026#39;pattern\u0026#39; in all .cpp files in \u0026#39;mydir\u0026#39;, recursively: : .... grep pattern -nr --include=\\*.cpp mydir .... Search for \u0026#39;pattern\u0026#39; in all .cpp and .h files in \u0026#39;mydir\u0026#39;, recursively: : .... grep pattern -nr --include=\\*.{cpp,h} mydir .... Search for \u0026#39;pattern\u0026#39; in all files in current dir, but don\u0026#39;t recurse into subdirectories: : .... grep -d skip pattern * .... Replace all occurrences of \u0026#39;oldstring\u0026#39; with \u0026#39;newstring\u0026#39; in all .txt files in directory tree rooted in \u0026#39;.\u0026#39;: .... find . -name \u0026#39;*.txt\u0026#39; -type f -print0 | xargs -0 sed -i \u0026#39;s|oldstring|newstring|g\u0026#39; .... Remove all .flac files in directory tree rooted in \u0026#39;.\u0026#39;: .... find . -name \u0026#39;*.flac\u0026#39; -type f -print0 | xargs -0 rm .... Compare 2 directories: print 2 columns of files unique to either directory: .... comm -3 \u0026lt;(find dir1 -type f -printf \u0026#39;%f\\n\u0026#39; | sort -u) \u0026lt;(find dir2 -type f -printf \u0026#39;%f\\n\u0026#39; | sort -u) .... == directories cd into parent dir of currently running bash script: : .... cd $(dirname $(readlink -f $0)) .... == Lines in files Output Nth line of file : .... more +N file | head -n 1 .... or .... head -N file | tail -1 .... Count the number of lines in file: : .... wc -l \u0026lt; my_text.txt .... == Modify files Remove all blank lines : .... cat file.txt | sed \u0026#39;/^\\s*$/d\u0026#39; \u0026gt; file2.txt .... or in-place: : .... sed -i \u0026#39;/^\\s*$/d\u0026#39; file.txt .... == Package management === dpkg Show (among other info) dependencies of .deb file: : .... dpkg -I package_file.deb .... Install a .deb file: : .... sudo dpkg -i package_file.deb .... Uninstall a .deb file: : .... sudo dpkg -r package_file.deb .... List all installed packages: : .... dpkg -l .... List files provided by package: : .... dpkg -L packagename .... === pacman Install a package : .... pacman -Syu package_name .... Check if a package is installed: : .... pacman -Q package_name .... List all files owned by an installed package: : .... pacman -Ql package_name .... Find package that owns a given file : .... pacman -Qo file_path .... Display info about an installed package: : .... pacman -Qi package_name .... Display info about a package: : .... pacman -Si package_name .... Uninstall a package and its orphaned dependencies: : .... pacman -Rs package_name .... Clean pacman cache ( /var/cache/pacman/pkg ): : .... pacman -Scc .... List all packages from a given repository (here \u0026#39;community\u0026#39; as an example): : .... paclist community .... Print dependency tree of a package: : .... pactree packagename .... == OpenBox Edit the OpenBox menu: : .... vi ~/.config/openbox/menu.xml .... Edit the OpenBox settings: : .... vi ~/.config/openbox/rc.xml .... Go to location of .desktop files: : .... cd /usr/share/applications .... Reconfigure OpenBox: : .... openbox --reconfigure .... == Make bootable USB stick from .iso file From::: http://crunchbang.org/forums/viewtopic.php?id=23267 Determine what device your USB is. With your USB plugged in run: : .... sudo ls -l /dev/disk/by-id/*usb* .... This should produce output along the lines of: : .... lrwxrwxrwx 1 root root 9 2010-03-15 22:54 /dev/disk/by-id/usb-_USB_DISK_2.0_077508380189-0:0 -\u0026gt; ../../sdb lrwxrwxrwx 1 root root 10 2010-03-15 22:54 /dev/disk/by-id/usb-_USB_DISK_2.0_077508380189-0:0-part1 -\u0026gt; ../../sdb1 .... Now cd to where your *.iso is : .... cd ~/downloads .... Example : .... sudo dd if=filename.iso of=/dev/usbdevice; sync .... let\u0026#39;s say the iso is named mini.iso and your USB device is sdb Example : .... sudo dd if=mini.iso of=/dev/sdb; sync .... == vim Some shortcuts: : .... Deleting text: dd Delete line dw Delete rest of word, until (but excluding) start of next word D Delete rest of line (including character under cursor) d$ \u0026#34; d0 Delete beginning of line before cursor x Delete character da( delete a set of matching parens and everything in them S substitute line (i.e. replace entire line with an empty line and go to insert mode) :%s/\\s\\+$// delete trailing whitespace on all lines Inserting text: i Insert text before cursor a Insert text after cursor A Append text to the end of a line I Insert text before the first non-blank in the line C Replace rest of line o Insert new line above cursor O Insert new line below cursor ctrl-v Insert tab character even when expandtab is on :r !ls Insert output of shell command into text (here: ls) Transforming text: ctrl-a increment number under cursor ctrl-x decrement number under cursor u undo ctrl-r redo Moving: g; jump back to last edited position. g_ go to last non-whitespace character on line w go to start of next word e go to end of (next) word b go start of (previous) word W go to start of next word (words are whitespace-delimited) E go to end of word (words are whitespace-delimited) B go start of (previous) word (words are whitespace-delimited) zz put current line at the center of the screen zz move current line to the middle of the screen zt move current line to the top of the screen zb move current line to the bottom of the screen Ctrl-e Moves screen up one line Ctrl-y Moves screen down one line Ctrl-u Moves screen up ½ page Ctrl-d Moves screen down ½ page Ctrl-b Moves screen up one page Ctrl-f Moves screen down one page Selecting pieces of text: vw select from cursor to start of next word vb select from cursor to start of word under cursor vaw select word under cursor vi( select parens block, parens excluded va( select parens block, parens included vi\u0026#34;, vi\u0026#39;, vi[, vi\u0026lt;, vi{ analogous as 2 lines higher va\u0026#34;, va\u0026#39;, va[, va\u0026lt;, va{ analogous as 2 lines higher vit select text between HTML tags vat select text between HTML tags, together with the tags themselves File handling: :e filename Open new file in editor :e! filename Open new file in editor, discard buffer :e . Browse current directory :w Write buffer :w filename Write buffer to filename :q Exit vim ZZ Save buffer and exit vim :x \u0026#34; ZQ Discard buffer and exit vim :q! \u0026#34; Searching: /searchstring search for searchstring /searchstring\\c case-insensitive search for searchstring :%s/old/new/g replace all occurrences of \u0026#39;old\u0026#39; with \u0026#39;new\u0026#39; :%s/\\/new/g same, but whole word only :%s/old\\c/new/g replace all case-insensitive matches of \u0026#39;old\u0026#39; with \u0026#39;new\u0026#39; :%s/old/new/gc replace all occurrences of \u0026#39;old\u0026#39; with \u0026#39;new\u0026#39;, confirm each substitution :%s/\\t/ /g replace all tabs with 4 spaces Tabs: :set expandtab :set tabstop=4 Comment all lines of a block Go to the first line, press ctrl-v, select until last line, press I# Reselect block: gv Uncomment all lines of a block Go to the first line, press ctrl-v, select until last line, press x Multi-window: Ctrl-w o Close all windows except current: :on idem Ctrl-w q Close current window Ctrl-w p Switch to previously accessed window: Colors: Show highlight groups with their current color: :so $VIMRUNTIME/syntax/hitest.vim .... == scp Copy the file \u0026#34;foobar.txt\u0026#34; from the local host to a remote host : .... scp foobar.txt your_username@remotehost.edu:some/remote/directory .... Copy the file \u0026#34;foobar.txt\u0026#34; from a remote host to the local host : .... scp your_username@remotehost.edu:foobar.txt some/local/directory .... Copy the directory \u0026#34;foo\u0026#34; from the local host to a remote host\u0026#39;s directory \u0026#34;bar\u0026#34; : .... scp -r foo your_username@remotehost.edu:some/remote/directory/bar .... Copy the directory \u0026#34;foo\u0026#34; from a remote host to the local host\u0026#39;s directory \u0026#34;bar\u0026#34; : .... scp -r your_username@remotehost.edu:some/remote/directory/foo bar .... == apt-get and dpkg Show info about file.deb: : .... dpkg -I file.deb .... == echo text and redirect to privileged file: .... echo \u0026#39;some text\u0026#39; | sudo tee -a /etc/some.file .... == Start/stop/enable/disable daemons Enable the ssh daemon: : .... update-rc.d ssh defaults .... Disable it: : .... update-rc.d -f ssh remove .... Start daemon: : .... sudo service ssh start .... Restart daemon: : .... sudo service ssh restart .... Stop daemon: : .... sudo service ssh stop .... == List of options for \u0026#39;setxkbmap\u0026#39;: .... vi /usr/share/X11/xkb/rules/base.lst .... == tmux Create new session: : .... $ tmux new -s session-name .... Detach from session: : .... d .... Attach to first available session: : .... $ tmux a .... Attach to specific session: : .... $ tmux a -t session-name .... == Install Oracle Java 7 in Debian Wheezy: From: http://stackoverflow.com/questions/15543603/installing-java-7-oracle-in-debian-via-apt-get .... sudo su echo \u0026#34;deb http://ppa.launchpad.net/webupd8team/java/ubuntu precise main\u0026#34; | tee -a /etc/apt/sources.list echo \u0026#34;deb-src http://ppa.launchpad.net/webupd8team/java/ubuntu precise main\u0026#34; | tee -a /etc/apt/sources.list apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys EEA14886 apt-get update apt-get install oracle-java7-installer .... == Git === Create a tag Create a tag both locally and on the remote: [source,bash] -- tagname=MY_TAG \u0026amp;\u0026amp; git tag -a $tagname -m \u0026#34;$tagname\u0026#34; \u0026amp;\u0026amp; git push origin $tagname -- === Delete a tag Delete a tag both on the remote and locally: [source,bash] -- tagname=MY_TAG \u0026amp;\u0026amp; git push --delete origin $tagname \u0026amp;\u0026amp; git tag --delete $tagname -- === Create a branch Create a branch both locally and on the remote: [source,bash] -- branchname=MY_BRANCH \u0026amp;\u0026amp; git checkout -b $branchname \u0026amp;\u0026amp; git push -u origin $branchname -- === Delete a branch Delete a branch both on the remote and locally: [source,bash] -- branchName=MY_BRANCH \u0026amp;\u0026amp; git push --delete origin $branchName \u0026amp;\u0026amp; git branch --delete $branchName -- === Revert some of the files in a commit List all files changed in a commit, select some of them and revert the selected ones to their previous state: [source,bash] -- commitHash=320aacfe3ad \u0026amp;\u0026amp; git diff-tree --no-commit-id --name-only -r $commitHash | pickn | xr git checkout ${commitHash}~1 -- -- === Show all tags that contain a given commit [source,bash] -- git tag --contains HASH -- === Web project: use Github Pages for a live demo Source: https://help.github.com/articles/creating-project-pages-manually/ http://lea.verou.me/2011/10/easily-keep-gh-pages-in-sync-with-master/ To create a Github Pages presence for your repo: .... git checkout --orphan gh-pages git merge master git push origin gh-pages git checkout master .... The demo will be visible at username.github.io/reponame To get the demo up-to-date with the master branch: .... git checkout gh-pages git merge master git push origin gh-pages git checkout master .... == Networking List processes and the ports they\u0026#39;re listening on: [source,bash] -- sudo netstat -tulpn -- Or: [source,bash] -- sudo netstat -an | less -- List iptables rules: [source,bash] -- sudo iptables -L -n -- == postgresql === .pgpass file Linux: ~/.pgpass Windows: %APPDATA%/postgresql/pgpass.conf The file should contain lines of the following format: [source] -- hostname:port:database:username:password -- Example: [source] -- localhost:*:*:postgres:postgres -- === pg_dump [source,bash] -- pg_dump --username=MYUSERNAME --file=MYDUMPFILE --format=custom DBNAME pg_restore --username=MYUSERNAME --clean --dbname=DBNAME MYDUMPFILE -- == Google Test === Filter tests at compile-time [source,c++] -- int main(int argc, char **argv) { ::testing::GTEST_FLAG(filter) = \u0026#34;testSuiteName.testName\u0026#34;; ::testing::InitGoogleTest(\u0026amp;argc, argv); RUN_ALL_TESTS(); } -- This is equivalent to the run-time argument: `--gtest_filter=testSuiteName.testName` "},{"id":17,"href":"/testbed/asciidoc.html","title":"Asciidoc markup","section":"Testbed","content":"= AsciiDoc markup testbed == Text formatting [frame=\u0026#34;none\u0026#34;,options=\u0026#34;header\u0026#34;] |========================================================= |Description |Syntax |Result |Remark | Emphasis, quotes | `One \u0026#39;Two\u0026#39; Three` | One \u0026#39;Two\u0026#39; Three | | Emphasis, underscores | `One _Two_ Three` | One _Two_ Three | | Emphasis, quotes, unconstrained | `One\u0026#39;\u0026#39;Two\u0026#39;\u0026#39;Three` | One\u0026#39;\u0026#39;Two\u0026#39;\u0026#39;Three | | Emphasis, underscores, unconstrained | `One__Two__Three` | One__Two__Three | | Strong | `One *Two* Three` | One *Two* Three | | Strong, unconstrained | `One**Two**Three` | One**Two**Three | | Monospace | `One +Two+ Three` | One +Two+ Three | | Monospace, unconstrained | `One++Two++Three` | One++Two++Three | | Single quote | `One `Two´ Three` | One `Two´ Three | Doesn\u0026#39;t seem to work | Double quotes | `One ``Two´´ Three` | One ``Two´´ Three | Doesn\u0026#39;t seem to work | Single quote, unconstrained | `One``Two´´Three` | One``Two´´Three | Doesn\u0026#39;t seem to work | Unquoted | `One #Two# Three` | One #Two# Three | Meant to add inline attributes (see next line) | Colored text | `One [red]#Two# Three` | One [red]#Two# Three | | Colored background | `One [yellow-background]#Two# Three` | One [yellow-background]#Two# Three | | Big text | `One [big]#Two# Three` | One [big]#Two# Three | | Underlined text | `One [underline]#Two# Three` | One [underline]#Two# Three | | Overlined text | `One [overline]#Two# Three` | One [overline]#Two# Three | | Line-through text | `One [line-through]#Two# Three` | One [line-through]#Two# Three | | Combinations | `One [red yellow-backgound line-through]*Two* Three` | One [red yellow-backgound line-through]*Two* Three | | Combinations, unconstrained | `One[red yellow-backgound line-through]**Two**Three` | One[red yellow-backgound line-through]**Two**Three | | Big text | `One [big]#Two# Three` | One [big]#Two# Three | | Superscript | `One ^Two^ Three` | One ^Two^ Three | | More superscript | `One^Two^Three` | One^Two^Three | | Subscript | `One ~Two~ Three` | One ~Two~ Three | | More subscript | `One~Two~Three` | One~Two~Three | |========================================================= == Paragraphs General syntax: -------------------------------------- ["},{"id":18,"href":"/arch/hetzner.html","title":"Installing Arch Linux on a Hetzner VPS","section":"Arch","content":"== Boot live iso\n\nIn the web config panel of the VPS, mount the Arch Linux .iso in your server \u0026amp; reboot. Connect to the server with the web console.\n\n[source, shell]\n----\nloadkeys be-latin1\n----\n\nNetwork should work: :\n\n[source, shell]\n----\ncurl www.google.com\n----\n\nSyncronize the system clock with NTP :\n\n[source, shell]\n----\ntimedatectl set-ntp true\n----\n\nCreate partition table :\n\n[source, shell]\n----\nfdisk -l /dev/sda\n\nfdisk /dev/sda\n----\n\nFirst, create a partition (sda1) of size 32 MB (+32M). Change its type to 1 (EFI System).\nThen, create a partion (sda2) with the rest of the available space.\n\nFormat the partitions:\n\n[source, shell]\n----\nmkfs.fat -F 16 /dev/sda1\nmkfs.ext4 /dev/sda2\n----\n\nMount the root partition :\n\n[source, shell]\n----\nmount /dev/sda2 /mnt\n----\n\nInstall the \u0026#39;base\u0026#39; package group :\n\n[source, shell]\n----\npacstrap /mnt base vim\n----\n\nCreate an fstab file :\n\n[source, shell]\n----\ngenfstab -U /mnt \u0026gt;\u0026gt; /mnt/etc/fstab\n----\n\n\u0026#39;chroot\u0026#39; into the newly created system :\n\n[source, shell]\n----\narch-chroot /mnt\n----\n\nSet the timezone :\n\n[source, shell]\n----\nln -s /usr/share/zoneinfo/Europe/Brussels /etc/localtime\n----\n\nUse UTC in hardware clock. Initialize the hardware clock from current\nsystem time. :\n\n[source, shell]\n----\nhwclock --systohc --utc\n----\n\nUse US locale :\n\n[source, shell]\n----\necho en_US.UTF-8 UTF-8 \u0026gt; /etc/locale.gen\nlocale-gen\necho LANG=en_US.UTF-8 \u0026gt; /etc/locale.conf\n----\n\nUse Belgian keymap :\n\n[source, shell]\n----\necho KEYMAP=be-latin1 \u0026gt; /etc/vconsole.conf\n----\n\nSet hostname :\n\n[source, shell]\n----\necho yeba \u0026gt; /etc/hostname\n----\n\nSet localhost alias :\n\n[source, shell]\n----\nvi /etc/hosts\n----\n\nIn /etc/hosts, add: :\n\n[source, shell]\n----\n127.0.0.1 yeba.localdomain yeba\n----\n\nSet password :\n\n[source, shell]\n----\npasswd\n----\n\nInstall boot loader \u0026#39;grub\u0026#39; :\n\n[source, shell]\n----\npacman -Syu grub\ngrub-install --target=i386-pc /dev/sda \u0026amp;\u0026amp; grub-mkconfig -o /boot/grub/grub.cfg\n----\n\n== Create user\n\n[source,shell]\n----\nuseradd -m bert\ngroupadd sudoers\nusermod -aG sudoers bert\npasswd bert\n----\n\nallow group \u0026#39;sudoers\u0026#39; to use sudo (in conf file):\n\n[source,shell]\n----\necho \u0026#39;%sudoers ALL=(ALL) ALL\u0026#39; \u0026gt; /etc/sudoers\n----\n\nInstall some packages:\n\n[source,shell]\n----\npacman -Syu sudo vim ufw knockd lighttpd git\n----\n\nuse \u0026#39;vim\u0026#39; as \u0026#39;vi\u0026#39;:\n\n[source,shell]\n----\nmv /usr/bin/vi /usr/bin/vi_BAK \u0026amp;\u0026amp; ln -s /usr/bin/vim /usr/bin/vi\n----\n\n== sshd config\n\nOn the client:\n\n[source,shell]\n----\nssh-copy-id bert@IP_ADDRESS\n----\n\nOn the server:\n\n[source,shell]\n----\nvi /etc/ssh/sshd_config\n----\n\n----\nLogLevel VERBOSE\nPermitRootLogin no\nPubkeyAuthentication yes\nPasswordAuthentication no\nAuthorizedKeysFile .ssh/authorized_keys\nChallengeResponseAuthentication no\nUsePAM yes\nAllowUsers bert\n----\n\nAdd 5s delay to failed login attempts:\n\n[source,shell]\n----\nbash -c \u0026#34;echo auth optional pam_faildelay.so delay=5000000 \u0026gt;\u0026gt; /etc/pam.d/system-login\u0026#34;\n----\n\nreboot needed for future ufw config:\n\n----\nreboot now\n----\n\n== ufw, knockd\n\nssh bert@IP_ADDRESS\n\n[source,shell]\n----\nsudo -i\n----\n\n[source,shell]\n----\nufw default deny ufw allow 22 ufw allow 80,443/tcp ufw enable\n----\n\n[source,shell]\n----\nvi /etc/knockd.conf\n----\n\n[source,shell]\n----\n[options]\n    logfile = /var/log/knockd.log\n\n[SSH]\n    sequence    = PORT1,...,PORTN\n    seq_timeout = 5\n    start_command = ufw allow from %IP% to any port 22\n    tcpflags    = syn\n    cmd_timeout   = 10\n    stop_command  = ufw delete allow from %IP% to any port 22\n----\n\n[source,shell]\n----\nsystemctl enable ufw.service\nsystemctl start ufw.service\nsystemctl enable knockd.service\nsystemctl start knockd.service\nufw delete allow 22\n----\n\n== Customization\n\nCreate dotfiles \u0026amp; tools:\n\n[source,shell]\n----\nmkdir ~/tools \u0026amp;\u0026amp; cd ~/tools\ngit clone https://github.com/bergoid/lswrappers.git\ngit clone https://github.com/bergoid/rabot.git\ngit clone https://github.com/bergoid/gt.git\ngit clone https://github.com/bergoid/preppy.git\ngit clone https://github.com/bergoid/dotfiles.git\ndotfiles/install_dotfiles echo\npreppy_hostnameColor=27 \u0026gt; ~/.localConfig\n----\n\nCustomize root env:\n\n[source,shell]\n----\nsudo -i\nln -s /home/bert/.tmux.conf .tmux.conf\nln -s /home/bert/tools/dotfiles/.vim/ .vim\nln -s /home/bert/tools/ tools\nln -s /home/bert/.bash_profile .bash_profile\nln -s /home/bert/.bashrc .bashrc\n----\n\n== spigot server\n\nEnable AUR\n[source,shell]\n----\nsudo pacman -Syu base base-devel mkcd ~/aur\n----\n\nInstall JRE\n[source,shell]\n----\ngit clone https://aur.archlinux.org/jre.git cd jre makepkg -si\n----\n\nInstall bukkit/spigot:\n\n[source,shell]\n----\nmkcd ~/mc\ncurl \u0026#34;https://hub.spigotmc.org/jenkins/job/BuildTools/lastSuccessfulBuild/artifact/target/BuildTools.jar\u0026#34;\n-o BuildTools.jar java -jar BuildTools.jar\n----\n\n[source,shell]\n----\nsudo pacman -Syu tmux dialog\n----\n\n[source,shell]\n----\nvi /etc/locale.gen\n----\n\nUncomment: \u0026#39;en_US.UTF-8 UTF-8\u0026#39;\n\n[source,shell]\n----\nlocale-gen\necho LANG=en_US.UTF-8 \u0026gt; /etc/locale.conf\nsudo ufw allow 24680\n----\n\nRemoved jre9:\n\n[source,shell]\n----\nsudo pacman -Rs jre\n----\n\nInstall jre8:::\n\n[source,shell]\n----\ncd ~/aur git clone https://aur.archlinux.org/jre8.git cd jre8 makepkg -si\n----\n\nCURRENT STATE\n\n"}]